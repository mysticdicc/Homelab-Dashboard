@using System.Collections
@using System.Net
@using NetTools
@using danklibrary
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components.Icons

@inject danklibrary.DankAPI.Subnets SubnetsAPI
@inject IJSRuntime JSRuntime
@inject IMessageService MessageService
@inject IDialogService DialogService

@attribute [StreamRendering(true)]
@page "/subtrackr/home"

<PageTitle>subnet trackr</PageTitle>

<FluentLayout>
    <FluentHeader Style="margin-bottom: 5px;">
        <FluentLabel Typo="Typography.Header" Color="Color.Lightweight">subnet trackr</FluentLabel>
        <FluentSpacer/>
        <FluentTextField @bind-Value="@newCidr" Style="margin-right: 5px;" Placeholder="0.0.0.0/0"/>
        <FluentButton IconEnd="@(new Icons.Regular.Size12.Add())" OnClick="@NewSubnet"/>
    </FluentHeader>

    <FluentBodyContent>
        <FluentGrid>
            @if (null != SubnetList) {
                foreach (Subnet subnet in SubnetList) {
                    <FluentGridItem xs="12">
                        <FluentCard Style="height: 100%; max-height: 30vh;">
                            <FluentGrid Style="margin: 1;">
                                <FluentGridItem xs="3" Style="align-content: center;">
                                    <FluentLabel>
                                        @IP.ConvertToString(subnet.Address)
                                    </FluentLabel>
                                </FluentGridItem>
                                <FluentGridItem xs="3" Style="align-content: center;">
                                    <FluentLabel>
                                        @IP.ConvertToString(subnet.StartAddress)
                                    </FluentLabel>
                                </FluentGridItem>
                                <FluentGridItem xs="3" Style="align-content: center;">
                                    <FluentLabel>
                                        @IP.ConvertToString(subnet.EndAddress)
                                    </FluentLabel>
                                </FluentGridItem>
                                <FluentGridItem xs="3" Justify="JustifyContent.FlexEnd">
                                    <FluentButton IconStart="@(new Icons.Regular.Size12.ArrowDown())" OnClick="@(() => OnClickExpand(subnet.ID))" />
                                    <FluentButton IconStart="@(new Icons.Regular.Size12.Delete())" OnClick="@(() => OnClickDelete(subnet.ID))" Style="margin-right: 10px;" />
                                </FluentGridItem>
                            </FluentGrid>

                            <div hidden="@(panelHidden[subnet.ID])">
                                @if (null != subnet.List && !panelHidden[subnet.ID])
                                {
                                    <FluentGrid>
                                        <FluentGridItem xs="2">
                                            <FluentLabel>IP Address</FluentLabel>
                                        </FluentGridItem>
                                        <FluentGridItem xs="2">
                                            <FluentLabel>Hostname</FluentLabel>
                                        </FluentGridItem>
                                        <FluentGridItem xs="2">
                                            <FluentLabel>Monitored</FluentLabel>
                                        </FluentGridItem>
                                        <FluentGridItem xs="2">
                                            <FluentLabel>ICMP</FluentLabel>
                                        </FluentGridItem>
                                        <FluentGridItem xs="2">
                                            <FluentLabel>Ports</FluentLabel>
                                        </FluentGridItem>
                                        <FluentGridItem xs="2">
                                            <FluentLabel></FluentLabel>
                                        </FluentGridItem>
                                    </FluentGrid>

                                    <div hidden="@(panelHidden[subnet.ID])" style="max-height: 20vh; overflow-y: auto; overflow-x: hidden">
                                        @foreach (IP ip in subnet.List) {
                                        <FluentDivider Style="margin-top: 5px;" />

                                        <FluentGrid>
                                            <FluentGridItem xs="2" Style="align-content: center;">
                                                <FluentLabel>@IP.ConvertToString(ip.Address)</FluentLabel>
                                            </FluentGridItem>

                                            <FluentGridItem xs="2" Style="align-content: center;">
                                                @if (null != ip.RowState)
                                                {
                                                    <div hidden="@(!ip.RowState.Hidden)">
                                                        @if (null != ip.Hostname)
                                                        {
                                                            <FluentLabel>@ip.Hostname</FluentLabel>
                                                        }
                                                    </div>
                                                    <div hidden="@(ip.RowState.Hidden)" style="display: flex;">
                                                        <FluentTextField @bind-Value="@ip.Hostname" />

                                                    </div>
                                                }
                                            </FluentGridItem>

                                            <FluentGridItem xs="2" Style="align-content: center; justify-content: center;">
                                                @if (ip.IsMonitoredICMP || ip.IsMonitoredTCP)
                                                {
                                                    <FluentIcon Value="@(new Icons.Regular.Size20.CheckboxChecked())" Color="Color.Success" />
                                                }
                                                else
                                                {
                                                    <FluentIcon Value="@(new Icons.Regular.Size20.CheckboxUnchecked())" />
                                                }
                                            </FluentGridItem>

                                            <FluentGridItem xs="2" Style="align-content: center; justify-content: center;">
                                                @if (null != ip.RowState)
                                                {
                                                    <div hidden="@(!ip.RowState.Hidden)">
                                                        @if (ip.IsMonitoredICMP)
                                                        {
                                                            <FluentIcon Value="@(new Icons.Regular.Size20.CheckboxChecked())" Color="Color.Success" />
                                                        }
                                                        else
                                                        {
                                                            <FluentIcon Value="@(new Icons.Regular.Size20.CheckboxUnchecked())" />
                                                        }
                                                    </div>
                                                    <div hidden="@(ip.RowState.Hidden)">
                                                        <FluentSwitch @bind-Value="@ip.IsMonitoredICMP" />
                                                    </div>
                                                }
                                            </FluentGridItem>

                                            <FluentGridItem xs="2" Style="align-content: center;">
                                                @if (null != ip.RowState)
                                                {
                                                    <div hidden="@(!ip.RowState.Hidden)">
                                                        @if (null != ip.PortsMonitored)
                                                        {
                                                            <FluentLabel>@StringFromListInt(ip.PortsMonitored)</FluentLabel>
                                                        }
                                                    </div>
                                                    <div hidden="@(ip.RowState.Hidden)">
                                                        <FluentTextField @bind-Value="@ip.RowState.PortNumbers" />
                                                    </div>
                                                }
                                            </FluentGridItem>

                                            <FluentGridItem xs="2" Style="display: inline-flex; align-content: center;">
                                                @if (null != ip.RowState)
                                                {
                                                    <div hidden="@(ip.RowState.Hidden)" style="align-content: center;">
                                                        <FluentButton IconEnd="@(new Icons.Regular.Size12.Add())" OnClick="@(() => OnClickSave(ip))" />
                                                    </div>
                                                }

                                                <FluentButton IconEnd="@(new Icons.Regular.Size12.Edit())" OnClick="@(() => OnClickEdit(ip))" Style="margin-right: 10px;" />
                                            </FluentGridItem>
                                        </FluentGrid>
                                        }

                                    </div>
                                }
                                else
                                {
                                    <FluentDivider Style="margin-top: 5px;" />
                                    <FluentProgressRing />
                                }
                            </div>
                        </FluentCard>
                    </FluentGridItem>
                }
            } else {
                <FluentCard>
                    <FluentProgressRing/>
                </FluentCard>
            }
        </FluentGrid>
    </FluentBodyContent>
</FluentLayout>

@code {
    Dictionary<int, bool>? panelHidden;

    List<Subnet>? SubnetList;

    string? newCidr;

    async protected override Task OnInitializedAsync()
    {
        await RefreshSubnetList();

        await base.OnInitializedAsync();
        StateHasChanged();
    }

    async Task RefreshSubnetList() {
        SubnetList = await SubnetsAPI.GetAll();

        foreach (var ip in SubnetList.SelectMany(x => x.List))
        {
            ip.RowState = new IpRowState
                {
                    Hidden = true
                };

            if (null != ip.PortsMonitored)
            {
                ip.RowState.PortNumbers = StringFromListInt(ip.PortsMonitored);
            }
        }
        
        if (null != panelHidden)
        {
            if (SubnetList.Count() > panelHidden.Count())
            {
                panelHidden = new();

                foreach (int ID in SubnetList.Select(x => x.ID))
                {
                    panelHidden.Add(ID, true);
                }
            }
        } else {
            panelHidden = new();

            foreach (int ID in SubnetList.Select(x => x.ID))
            {
                panelHidden.Add(ID, true);
            }
        }
    }

    void OnClickExpand(int ID) {
        panelHidden[ID] = !panelHidden[ID];
        StateHasChanged();
    }

    void OnClickEdit(IP ip) {
        ip.RowState.Hidden = !ip.RowState.Hidden;

        if (null != ip.PortsMonitored) {
            ip.RowState.PortNumbers = StringFromListInt(ip.PortsMonitored);
        }

        StateHasChanged();
    }

    async void OnClickSave(IP ip) {
        if (null != ip.RowState.PortNumbers) {
            ip.PortsMonitored = ListIntFromString(ip.RowState.PortNumbers);
        }

        await SubnetsAPI.EditIP(ip);
        await RefreshSubnetList();
        StateHasChanged();
    }

    async void NewSubnet() {
        await SubnetsAPI.AddSubnet(newCidr);
        newCidr = String.Empty;
        await OnInitializedAsync();
    }

    async void OnClickDelete(int ID) {
        await SubnetsAPI.DeleteSubnet(ID);
        await OnInitializedAsync();
    }

    List<int> ListIntFromString(string textInput) {

        var list = new List<int>();
        var strList = textInput.Split(",");

        foreach (string str in strList) {
            list.Add(int.Parse(str));
        }

        return list;
    }

    string StringFromListInt(List<int> intput) {
        string returnStr = String.Empty;

        foreach (int num in intput) {
            returnStr = returnStr + $"{num.ToString()},";
        }

        returnStr = returnStr.Remove(returnStr.Length - 1);

        return returnStr;
    }
}
