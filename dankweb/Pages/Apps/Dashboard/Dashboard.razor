@inject dankweb.DankAPI.Dash DashAPI
@inject IJSRuntime JSRuntime
@inject IMessageService MessageService
@inject IDialogService DialogService
@page "/dashboard/home"

<PageTitle>Dashboard</PageTitle>

<FluentLayout>
    <FluentHeader>
        <FluentLabel Typo="Typography.Header">Dashboard</FluentLabel>
        <FluentSpacer/>
        <FluentButton Style="margin-right: 5px;" OnClick="@OnClickEdit">Edit</FluentButton>
        <FluentButton OnClick="@OnClickAdd">Add</FluentButton>
    </FluentHeader>

    <FluentBodyContent Style="margin-top: 10px;">
        <FluentGrid Style="align-items: stretch;">
            @if (null != dashboardItems)
            {
                foreach (DashboardItem item in dashboardItems)
                {
                    <FluentGridItem xs="6" sm="4" xl="2" lg="3" Class="dashboardGridItem">
                        <FluentCard onclick="@(() => OnClickCard(item))" class="dashboardCard" >
                            <div hidden="@(!editHidden)">
                                <FluentLabel Typo="Typography.Subject">@item.DisplayName</FluentLabel>
                                <FluentLabel Typo="Typography.Body">@item.URL</FluentLabel>
                            </div>

                            <div hidden="@editHidden">
                                <FluentLabel style="margin-bottom: 5px;" Typo="Typography.Subject">ID: @item.ID</FluentLabel>

                                <FluentLabel Typo="Typography.Body">Display Name:</FluentLabel>
                                <FluentTextField Value="@item.DisplayName" Class="dashboardCardTxt"/>
                                <FluentLabel Typo="Typography.Body">URL:</FluentLabel>
                                <FluentTextField Value="@item.URL" Class="dashboardCardTxt"/>
                                <FluentLabel Typo="Typography.Body">Description:</FluentLabel>
                                <FluentTextArea Value="@item.Description" Class="dashboardCardTxt"/>

                                <FluentFooter Style="margin-top: 10px;">
                                    <FluentButton OnClick="@(() => OnClickCardSave(item.ID))">Save</FluentButton>
                                    <FluentSpacer />
                                    <FluentButton OnClick="@(() => OnClickCardDelete(item.ID))">Delete</FluentButton>
                                </FluentFooter>
                            </div>
                        </FluentCard>
                    </FluentGridItem>
                }
            }
            else
            {
                <FluentOverlay>
                    <FluentProgressRing />
                </FluentOverlay>
            }

            <FluentGridItem xs="6" sm="4" xl="2" lg="3" Class="dashboardGridItem" hidden="@addHidden">
                <FluentCard>
                    <FluentTextField Label="Display Name" Class="dashboardCardTxt" @bind-Value="@newDisplay"/>
                    <FluentTextField Label="URL" Class="dashboardCardTxt" @bind-Value="@newURL" />
                    <FluentTextArea Label="Description" Class="dashboardCardTxt" @bind-Value="@newDescription" />

                    <FluentButton OnClick="@OnClickNewSave">Save</FluentButton>
                </FluentCard>
            </FluentGridItem>
        </FluentGrid>
    </FluentBodyContent>
</FluentLayout>

<style>
    .dashboardCard {
    width: 100%;
    height: 100%;
    }

    .dashboardCard:hover {
    background-color: darkgray;
    width: 100%;
    height: 100%;
    }

    .dashboardGridItem {
    display: flex;
    }

    .dashboardCardTxt {
    width: 100%;
    }
</style>

@code {
    List<DashboardItem>? dashboardItems;
    bool addHidden;
    bool editHidden;

    string newDisplay;
    string newURL;
    string newDescription;

    string editDisplay;
    string editURL;
    string editDescription;

    async protected override Task OnInitializedAsync()
    {
        addHidden = true;
        editHidden = true;

        dashboardItems = await DashAPI.GetAll();
        await base.OnInitializedAsync();
    }

    async void OnClickCard(DashboardItem item) {
        if (editHidden) {
            if (DashboardItem.UrlIsValid(item))
            {
                await JSRuntime.InvokeVoidAsync("open", $"{item.URL}", "_blank");
            }
        }
    }

    void OnClickAdd() {
        addHidden = !addHidden;
    }

    void OnClickEdit() {
        editHidden = !editHidden;
    }

    void OnClickCardSave(int ID) {
        if (null != dashboardItems) {
            DashboardItem? editItem = dashboardItems.Where(x => x.ID == ID).FirstOrDefault();

            if (null != editItem) {

            }
        }
    }

    async void OnClickCardDelete(int ID) {
        if (null != dashboardItems)
        {
            DashboardItem? deleteItem = dashboardItems.Where(x => x.ID == ID).FirstOrDefault();

            if (null != deleteItem)
            {
                try 
                {
                    await DashAPI.DeleteItem(deleteItem);
                    var dialog = await DialogService.ShowSuccessAsync($"{deleteItem.ID} successfully deleted");
                    var result = dialog.Result;

                    dashboardItems = await DashAPI.GetAll();

                    StateHasChanged();
                } 
                catch (Exception ex)
                {
                    var dialog = await DialogService.ShowErrorAsync($"{ex.Message}");
                    var result = await dialog.Result;
                }
            }
        }
    }

    async void OnClickNewSave() {
        DashboardItem addItem = new(){ 
            ID = 0, 
            DisplayName = newDisplay, 
            URL = newURL, 
            Description = newDescription 
        };

        if (null != addItem) {
            if (DashboardItem.IsValid(addItem)) {
                try
                {
                    await DashAPI.AddItem(addItem);

                    var dialog = await DialogService.ShowSuccessAsync($"Successfully added");
                    var result = dialog.Result;

                    dashboardItems = await DashAPI.GetAll();

                    //reset state
                    newDescription = String.Empty;
                    newDisplay = String.Empty;
                    newURL = String.Empty;

                    addHidden = true;

                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    var dialog = await DialogService.ShowErrorAsync($"{ex.Message}");
                    var result = await dialog.Result;
                }
            } 
            else 
            {
                var dialog = await DialogService.ShowErrorAsync("Object invalid");
                var result = await dialog.Result;
            }
        } 
        else {
            var dialog = await DialogService.ShowErrorAsync("Object null");
            var result = await dialog.Result;
        }
    }
}
