@using ApexCharts;

@inject danklibrary.DankAPI.Monitoring MonitoringAPI
@inject IJSRuntime JSRuntime
@inject IMessageService MessageService
@inject IDialogService DialogService
@page "/monitoring/home"

<PageTitle>monitoring</PageTitle>

<FluentLayout>
    <FluentHeader>
        <FluentLabel Typo="Typography.Header" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Lightweight">monitoring</FluentLabel>
    </FluentHeader>

    <FluentBodyContent>
        <div style="max-height: 80vh">
            @if (null != monitorStates)
            {
                <ApexChart TItem="MonitorState" Title="Devices Up" Height="200">
                    <ApexPointSeries TItem="MonitorState" Items="@monitorStates" XValue="x => x.SubmitTime" YValue="@(x => (CountOfBools(x.SubmitTime)))">

                    </ApexPointSeries>
                </ApexChart>
            } else {
                <FluentProgressRing/>
            }
        </div>
    </FluentBodyContent>
</FluentLayout>

@code {
    List<MonitorState>? monitorStates;

    async protected override Task OnInitializedAsync()
    {
        await UpdateMonitorList();
        await base.OnInitializedAsync();
    }

    async Task UpdateMonitorList() {
        monitorStates = await MonitoringAPI.GetAllPolls();   
    }

    Decimal CountOfBools(DateTime time) {
        Decimal trueBools = 0;

        if (null != monitorStates) {
            var list = monitorStates.Where(x => x.SubmitTime == time).ToList();
            trueBools = list.Where(x => x.IcmpResponse == true).Count();
        }

        return trueBools;
    }
}
