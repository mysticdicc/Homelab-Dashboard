@using ApexCharts

@inject danklibrary.DankAPI.Monitoring MonitoringAPI
@inject IJSRuntime JSRuntime
@inject IMessageService MessageService
@inject IDialogService DialogService
@page "/monitoring/home"

<PageTitle>monitoring</PageTitle>

<FluentLayout>
    <FluentHeader>
        <FluentLabel Typo="Typography.Header" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Lightweight">monitoring</FluentLabel>
    </FluentHeader>

    <FluentBodyContent>
        <FluentGrid Style="margin-top: 10px">
            <FluentGridItem xs="6" Style="height: 35vh">
                @if (null != monitorStates)
                {
                    <ApexChart TItem="MonitorState"
                    Title="Uptime"
                    Height="@("100%")"
                    Options="options">

                        <ApexPointSeries TItem="MonitorState"
                        Items="monitorStates"
                        XValue="@(x => $"{x.SubmitTime.Hour}:{x.SubmitTime.Minute}:{x.SubmitTime.Second}")"
                        YAggregate="@(e => e.Where(x => x.IcmpResponse == true).Count())"
                        SeriesType="SeriesType.Line"
                        Name="Devices Online">
                        </ApexPointSeries>

                        <ApexPointSeries TItem="MonitorState"
                        Items="monitorStates"
                        XValue="@(x => $"{x.SubmitTime.Hour}:{x.SubmitTime.Minute}:{x.SubmitTime.Second}")"
                        YAggregate="@(e => e.Where(x => x.IcmpResponse == false).Count())"
                        SeriesType="SeriesType.Line"
                        Name="Devices Offline">
                        </ApexPointSeries>

                        <ApexPointSeries TItem="MonitorState"
                        Items="monitorStates"
                        XValue="@(x => $"{x.SubmitTime.Hour}:{x.SubmitTime.Minute}:{x.SubmitTime.Second}")"
                        YAggregate="@(e => e.Count())"
                        SeriesType="SeriesType.Line"
                        Name="Devices Monitored">
                        </ApexPointSeries>

                    </ApexChart>
                }
                else
                {
                    <FluentProgressRing />
                }
            </FluentGridItem>
            <FluentGridItem xs="3" Style="height: 35vh">
                <FluentCard>
                    <div style="width: 100%; margin-bottom: 5px;">
                        <FluentLabel>All Time Statistics:</FluentLabel>
                    </div>
                    @if (null != monitorStates)
                    {
                        <div style="width: 100%">
                            <FluentLabel>Monitored: @monitorStates.Select(x => x.IP_ID).Distinct().Count()</FluentLabel>
                        </div>
                        <div style="width: 100%">
                            <FluentLabel>Polls: @monitorStates.Count()</FluentLabel>
                        </div>
                        <div style="width: 100%">
                            <FluentLabel></FluentLabel>
                        </div>
                        <div style="width: 100%">
                            <FluentLabel></FluentLabel>
                        </div>
                        <div style="width: 100%">
                            <FluentLabel></FluentLabel>
                        </div>
                        <div style="width: 100%">
                            <FluentLabel></FluentLabel>
                        </div>
                        <div style="width: 100%">
                            <FluentLabel></FluentLabel>
                        </div>
                    }
                    else
                    {
                        <FluentProgressRing />
                    }
                </FluentCard>
            </FluentGridItem>
            <FluentGridItem xs="3" Style="height: 35vh">
                <FluentCard>
                    <div style="width: 100%; margin-bottom: 5px;">
                        <FluentLabel>Last Poll Statistics:</FluentLabel>
                    </div>
                    @if (null != monitoredIPs && null != lastPolls)
                    {
                        <div style="width: 100%;">
                            <FluentLabel>Time: @lastDate</FluentLabel>
                        </div>
                        <div style="width: 100%">
                            <FluentLabel>Monitored: @lastPolls.Count()</FluentLabel>
                        </div>
                        <div style="width: 100%">
                            <FluentLabel>Online: @lastPolls.Where(x => x.IcmpResponse == true).Count()</FluentLabel>
                        </div>
                        <div style="width: 100%">
                            <FluentLabel>Offline: @lastPolls.Where(x => x.IcmpResponse == false).Count()</FluentLabel>
                        </div>
                        <div style="width: 100%">
                            <FluentLabel></FluentLabel>
                        </div>
                    }
                </FluentCard>
            </FluentGridItem >
            <FluentGridItem xs="12">
                <FluentCard>
                    <div style="width: 100%;">
                        <FluentGrid>
                            <FluentGridItem xs="10" Style="align-content: center;">
                                <FluentLabel>Monitored IPs</FluentLabel>
                            </FluentGridItem>
                            <FluentGridItem xs="2" Justify="JustifyContent.FlexEnd">
                                <FluentButton IconEnd="@(new Icons.Regular.Size20.ArrowDown())" OnClick="@(() => ToggleMonitoredHidden())" />
                            </FluentGridItem>
                        </FluentGrid>
                    </div>
                    <div style="width: 100%" hidden="@monitoredHidden">
                        <FluentGrid>
                            @if (null != currentlyMonitored) {
                                foreach (IP ip in currentlyMonitored)
                                {
                                    <FluentGridItem xs="3">
                                        <FluentCard>
                                            <FluentGrid Style="width: 100%">
                                                <FluentGridItem xs="10">
                                                    <FluentLabel>@IP.ConvertToString(ip.Address)</FluentLabel>
                                                    <FluentLabel>@ip.Hostname</FluentLabel>
                                                </FluentGridItem>
                                                <FluentGridItem xs="2" Style="align-content: center;">
                                                    @if (LastMonitorState(ip.ID)) {
                                                        <FluentIcon Value="@(new Icons.Regular.Size24.CheckboxChecked())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Success" />
                                                    } 
                                                    else
                                                    {
                                                        <FluentIcon Value="@(new Icons.Regular.Size24.CheckboxWarning())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Warning" />

                                                    }
                                                </FluentGridItem>
                                            </FluentGrid>
                                        </FluentCard>
                                    </FluentGridItem>
                                }
                            }
                        </FluentGrid>
                    </div>
                </FluentCard>
            </FluentGridItem>
        </FluentGrid>
    </FluentBodyContent>
</FluentLayout>

@code {
    List<MonitorState>? monitorStates;
    List<IP>? monitoredIPs;
    List<IP>? currentlyMonitored;

    DateTime? lastDate;
    List<MonitorState>? lastPolls;

    bool monitoredHidden = true;

    ApexChartOptions<MonitorState> options = new ApexChartOptions<MonitorState>();

    async protected override Task OnInitializedAsync()
    {
        options.Xaxis = new XAxis
        {
            Title = new AxisTitle {
                Text = "Time (hh:mm:ss)"
            }
        };

        await UpdateMonitorList();
        await UpdateIPlist();

        await base.OnInitializedAsync();
    }

    async Task UpdateMonitorList() {
        monitorStates = await MonitoringAPI.GetAllPolls();   

        lastDate = monitorStates.OrderByDescending(x => x.SubmitTime).Select(x => x.SubmitTime).FirstOrDefault();
        lastPolls = monitorStates.Where(x => x.SubmitTime == lastDate).ToList();
    }

    async Task UpdateIPlist() {
        monitoredIPs = await MonitoringAPI.GetMonitoredIPs();

        if (null != lastPolls) {
            var ids = lastPolls.Select(x => x.IP_ID).Distinct();
            currentlyMonitored = monitoredIPs.Where(x => ids.Contains(x.ID)).ToList();
        }

    }

    void ToggleMonitoredHidden() {
        monitoredHidden = !monitoredHidden;
    }

    bool LastMonitorState(int ID) {
        if (null != lastPolls) {
            var state = lastPolls.Where(x => x.IP_ID == ID).FirstOrDefault();

            if (null != state) {
                if (state.IcmpResponse == true)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            } else {
                return false; 
            }

        } else {
            return false;
        }
    }
}
