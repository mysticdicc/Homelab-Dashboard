@using System.Collections
@using System.Net
@using NetTools
@using System.Text.RegularExpressions

@inject danklibrary.DankAPI.Subnets SubnetsAPI
@inject IJSRuntime JSRuntime

@page "/subtrackr/home"

<PageTitle>subnet trackr</PageTitle>

<div style="display: flex; gap: 1rem; margin-top: 1rem; margin-bottom: 1rem;">
    <RadzenTextBox @bind-Value="@newCidr" Placeholder="0.0.0.0/24"/>
    <RadzenButton Icon="add" Click="@NewSubnet" />
</div>

<div>
    <RadzenCard class="subnet_card">
        <RadzenRow>
            <RadzenColumn Size="2">
                <RadzenText class="subnet_row_contents">
                    Subnet Address
                </RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="2">
                <RadzenText class="subnet_row_contents">
                    Start Address
                </RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="2">
                <RadzenText class="subnet_row_contents">
                    End Address
                </RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="4">
                <div hidden="@(!showSearch)" class="subnet_row_contents">
                    <RadzenText class="subnet_row_contents">
                        IP Search
                    </RadzenText>
                </div>
            </RadzenColumn>
            <RadzenColumn Size="2">
                <div style="width: 1vw;"/>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
    @if (null != SubnetList) {
        foreach (Subnet subnet in SubnetList) {
            <RadzenCard class="subnet_card">
                <RadzenRow>
                    <RadzenColumn Size="2">
                        <RadzenText class="subnet_row_contents">
                            @IP.ConvertToString(subnet.Address)
                        </RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="2">
                        <RadzenText class="subnet_row_contents">
                            @IP.ConvertToString(subnet.StartAddress)
                        </RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="2">
                        <RadzenText class="subnet_row_contents">
                            @IP.ConvertToString(subnet.EndAddress)
                        </RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="2">
                        <div hidden="@(subnet.RowState.Hidden)" style="display: relative;">
                            <RadzenTextBox @bind-Value="@subnet.RowState.SearchTerm" onkeyup="@((KeyboardEventArgs e) => OnSearchKeyPress(e, subnet.ID))" Placeholder="Search" Style="margin-right: 2%; max-width: 80%; width: auto;"/>
                            <RadzenButton Icon="search" Click="@(() => SearchSubnet(subnet.ID))" class="right_button" Style="max-width: 15%"/>
                        </div>
                    </RadzenColumn>
                    <RadzenColumn Size="2" Style="justify-content: center; display: flex; gap: 0.5rem;">
                        <RadzenButton Icon="keyboard_arrow_down" Click="@(() => OnClickExpand(subnet.ID))" class="subnet_row_contents" />
                        <RadzenButton Icon="delete" Click="@(() => OnClickDelete(subnet.ID))" class="subnet_row_contents" />
                    </RadzenColumn>
                    <RadzenColumn Size="2">

                    </RadzenColumn>
                </RadzenRow>
                <div hidden="@subnet.RowState.Hidden" style="margin-top: 1rem;">
                    @if (null != subnet.List)
                    {
                        <RadzenRow>
                            <div class="black_line"/>
                            <RadzenColumn Size="2">
                                <RadzenText class="subnet_row_contents">
                                    IP Address
                                </RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="2">
                                <RadzenText class="subnet_row_contents">
                                    Hostname
                                </RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="2">
                                <RadzenText class="subnet_row_contents">
                                    Monitored
                                </RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="2">
                                <RadzenText class="subnet_row_contents">
                                    ICMP
                                </RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="2">
                                <RadzenText class="subnet_row_contents">
                                    Ports
                                </RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="2">

                            </RadzenColumn>
                        </RadzenRow>

                        <div hidden="@subnet.RowState.Hidden">
                            <Virtualize Items="@(subnet.List.Where(x => x.RowState.Hidden == false).ToList())">
                                <div hidden="@(subnet.RowState.Hidden)">
                                    <RadzenRow>
                                    <div class="black_line" />
                                    <RadzenColumn Size="2">
                                        <RadzenText class="subnet_row_contents">
                                            @IP.ConvertToString(context.Address)
                                        </RadzenText>
                                    </RadzenColumn>

                                    @if (null != context.RowState)
                                    {
                                        <RadzenColumn Size="2">
                                            <div hidden="@context.RowState.Hidden">
                                                <RadzenTextBox @bind-Value="@context.Hostname" Style="width: 100%"/>
                                            </div>
                                        </RadzenColumn>
                                        <RadzenColumn Size="2">
                                            <div hidden="@(!context.RowState.Hidden)">
                                                <RadzenText>
                                                    @context.Hostname
                                                </RadzenText>
                                            </div>
                                        </RadzenColumn>
                                        <RadzenColumn Size="2" Style="align-content: center; display: flex; justify-content: center;">
                                            @if (context.IsMonitoredICMP || context.IsMonitoredTCP)
                                            {
                                                <RadzenIcon Icon="check" class="subnet_row_contents"/>
                                            }
                                            else
                                            {
                                                <RadzenIcon Icon="close" class="subnet_row_contents"/>
                                            }
                                        </RadzenColumn>
                                        <RadzenColumn Size="2" Style="align-content: center; display: flex; justify-content: center;">
                                            <div hidden="@context.RowState.EditHidden">
                                                @if (context.IsMonitoredICMP)
                                                {
                                                    <RadzenIcon Icon="check" class="subnet_row_contents"/>
                                                }
                                                else
                                                {
                                                    <RadzenIcon Icon="close" class="subnet_row_contents"/>
                                                }
                                            </div>
                                            <div hidden="@(!context.RowState.EditHidden)">
                                                <RadzenSwitch @bind-Value="@context.IsMonitoredICMP" class="subnet_row_contents"/>
                                            </div>
                                        </RadzenColumn>
                                        <RadzenColumn Size="2" Style="display: flex;">
                                            <div hidden="@context.RowState.EditHidden">
                                                @if (null != context.PortsMonitored)
                                                {
                                                    <RadzenText class="subnet_row_contents">
                                                        @(StringFromListInt(context.PortsMonitored))
                                                    </RadzenText>
                                                }
                                            </div>
                                            <div hidden="@(!context.RowState.EditHidden)">
                                                <RadzenTextBox @bind-Value="@context.RowState.PortNumbers" Style="margin-right: 0.5rem;"/>
                                            </div>
                                            <div hidden="@context.RowState.EditHidden">
                                                <RadzenButton Icon="edit" OnClick="@(() => OnClickEdit(context))" class="subnet_row_contents"/>
                                            </div>
                                            <div hidden="@(!context.RowState.EditHidden)">
                                                <RadzenButton Icon="save" OnClick="@(() => OnClickSave(context))" class="subnet_row_contents"/>
                                            </div>
                                        </RadzenColumn>
                                        <RadzenColumn Size="2">

                                        </RadzenColumn>
                                    }
                                    else 
                                    {
                                        <RadzenColumn Size="10"/>
                                    }
                                    </RadzenRow>
                                </div>
                            </Virtualize>
                        </div>
                    }
                </div>
            </RadzenCard>
        }
    }
    else 
    {
        <RadzenProgressBarCircular Mode="ProgressBarMode.Indeterminate"/>
    }
</div>

@code {
    List<Subnet>? SubnetList;
    bool showSearch = false;
    string? newCidr;

    async protected override Task OnInitializedAsync()
    {
        await RefreshSubnetList();

        await base.OnInitializedAsync();
        StateHasChanged();
    }

    async Task RefreshSubnetList() {
        SubnetList = await SubnetsAPI.GetAll();

        foreach (var subnet in SubnetList) {
            subnet.RowState = new SubnetRowState
            {
                Hidden = true,
                SearchTerm = String.Empty
            };
        }

        foreach (var ip in SubnetList.SelectMany(x => x.List))
        {
            ip.RowState = new IpRowState
                {
                    Hidden = false,
                    EditHidden = true
                };

            if (null != ip.PortsMonitored)
            {
                ip.RowState.PortNumbers = StringFromListInt(ip.PortsMonitored);
            }
        }
    }

    void OnClickExpand(int ID) {
        var subnet = SubnetList.Where(x => x.ID == ID).First();
        subnet.RowState.Hidden = !subnet.RowState.Hidden;
        showSearch = !showSearch;
        StateHasChanged();
    }

    void OnClickEdit(IP ip) {
        ip.RowState.EditHidden = !ip.RowState.EditHidden;

        if (null != ip.PortsMonitored) {
            ip.RowState.PortNumbers = StringFromListInt(ip.PortsMonitored);
        }

        StateHasChanged();
    }

    async void OnClickSave(IP ip) {
        if (null != ip.RowState.PortNumbers) {
            ip.PortsMonitored = ListIntFromString(ip.RowState.PortNumbers);
        }

        await SubnetsAPI.EditIP(ip);
        await RefreshSubnetList();
        StateHasChanged();
    }

    async void NewSubnet() {
        await SubnetsAPI.AddSubnet(newCidr);
        newCidr = String.Empty;
        await OnInitializedAsync();
    }

    async void OnClickDelete(int ID) {
        await SubnetsAPI.DeleteSubnet(ID);
        await OnInitializedAsync();
    }

    List<int> ListIntFromString(string RadzenTextRadzenRadzenTextBox) {

        var list = new List<int>();
        var strList = RadzenTextRadzenRadzenTextBox.Split(",");

        foreach (string str in strList) {
            list.Add(int.Parse(str));
        }

        return list;
    }

    string StringFromListInt(List<int> intput) {
        string returnStr = String.Empty;

        foreach (int num in intput) {
            returnStr = returnStr + $"{num.ToString()},";
        }

        returnStr = returnStr.Remove(returnStr.Length - 1);

        return returnStr;
    }

    void SearchSubnet(int subnetID) {
        if (null != SubnetList) 
        {
            var subnet = SubnetList.Find(x => x.ID == subnetID);

            if (null != subnet)
            {
                foreach (var ip in subnet.List) {
                    if (null != ip.RowState) {
                        ip.RowState.Hidden = false;
                    }
                }

                if (null != subnet.RowState.SearchTerm) {
                    string pattern = "[A-Z]+";
                    var regex = new Regex(pattern, RegexOptions.IgnoreCase);
                    var match = regex.Match(subnet.RowState.SearchTerm);

                    var ipList = new List<IP>();

                    if (match.Success) 
                    {
                        ipList = subnet.List.Where(x => null != x.Hostname && !x.Hostname.Contains(subnet.RowState.SearchTerm)).ToList();
                        ipList.AddRange(subnet.List.Where(x => null == x.Hostname || String.Empty == x.Hostname));
                    } 
                    else 
                    {
                        ipList = subnet.List.Where(x => !(IP.ConvertToString(x.Address)).Contains(subnet.RowState.SearchTerm)).ToList();
                    }

                    if (ipList.Count > 0)
                    {
                        foreach (var ip in ipList)
                        {
                            if (null != ip.RowState)
                            {
                                ip.RowState.Hidden = true;
                            }
                        }
                    }
                    else
                    {
                        foreach (var ip in subnet.List)
                        {
                            if (null != ip.RowState)
                            {
                                ip.RowState.Hidden = false;
                            }
                        }
                    }
                }
                else if (null == subnet.RowState.SearchTerm || String.Empty == subnet.RowState.SearchTerm) 
                {
                    foreach (var ip in subnet.List)
                    {
                        if (null != ip.RowState)
                        {
                            ip.RowState.Hidden = false;
                        }
                    }
                }
            }

            StateHasChanged();
        }
    }

    void OnSearchKeyPress(KeyboardEventArgs eventArgs, int ID) {
        if (eventArgs.Code == "Enter") {
            SearchSubnet(ID);
        }
    }
}
