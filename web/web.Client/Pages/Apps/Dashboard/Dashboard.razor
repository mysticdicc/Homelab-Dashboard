@inject danklibrary.DankAPI.Dash DashAPI
@inject IJSRuntime JSRuntime
@inject NotificationService NotificationService

@page "/"

<PageTitle>dashboard</PageTitle>

<div style="display: flex; gap: 1rem; margin-top: 1rem; margin-bottom: 1rem;">
    <RadzenButton Icon="add" Click="@OnClickAdd" />
</div>

<RadzenRow Gap="1rem">
    @if (null != dashboardItems)
    {
        foreach (DashboardItem item in dashboardItems)
        {
            <RadzenColumn SizeXS="12" SizeSM="6" SizeMD="3" SizeLG="2">
                <RadzenCard onclick="@(() => OnClickCard(item))" id="@($"fluentcard_{item.ID}")" class="dashboard_card">
                    <div hidden="@(!editHiddenDict[item.ID])">
                        <RadzenColumn Size="12">
                            <RadzenRow Style="display: flex; flex-direction: row;">
                                <RadzenText class="dashboard_card_text" Style="justify-self: left;">
                                    @item.DisplayName
                                </RadzenText>
                                <RadzenButton Icon="edit" Click="@(() => OnClickEdit(item.ID))" Style="margin-right: 0; margin-left: auto;"/>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenText class="dashboard_card_text">
                                    @item.URL
                                </RadzenText>
                            </RadzenRow>
                            <RadzenRow>
                                @if (null != item.Icon)
                                {
                                    <img src="@(GetPngString(item.Icon))" style="max-height: 45px; max-width: 45px; background-color: transparent; position: absolute; top: 5px; right: 5px;" />
                                }
                            </RadzenRow>
                        </RadzenColumn>
                    </div>
                    <div hidden="@(editHiddenDict[item.ID])">
                        <RadzenColumn Size="12">
                            <RadzenRow>
                                <RadzenTextBox @bind-Value="@(item.DisplayName)" Placeholder="Display Name" class="dashboard_card_text"/>
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenTextBox @bind-Value="@(item.URL)" Placeholder="URL" class="dashboard_card_text" />
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenTextArea @bind-Value="@(item.Description)" Placeholder="Description" class="dashboard_card_text" />
                            </RadzenRow>
                            <RadzenRow>
                                @if (null != item.Icon)
                                {
                                    <img src="@(GetPngString(item.Icon))" style="max-height: 50px; max-width: 50px;" />
                                    <RadzenButton Click="@(() => OnDeleteIcon(item.ID))">Delete Icon</RadzenButton>
                                }
                                else
                                {
                                    <InputFile OnChange="@(e => IconUpload(e, item.ID))" accept=".png" />
                                }
                            </RadzenRow>
                            <RadzenRow>
                                <RadzenButton Click="@(() => OnClickCardSave(item.ID))">Save</RadzenButton>
                                <RadzenButton Click="@(() => OnClickCardDelete(item.ID))">Delete</RadzenButton>
                            </RadzenRow>
                        </RadzenColumn>
                    </div>
                </RadzenCard>
            </RadzenColumn>
        }
    }
    else
    {
        <RadzenProgressBarCircular Mode="ProgressBarMode.Indeterminate" />
    }
    <RadzenColumn SizeXS="12" SizeSM="6" SizeMD="3" SizeLG="2" hidden="@(addHidden)">
        <RadzenCard class="dashboard_card">
            <RadzenTextBox @bind-Value="@newDisplay" Placeholder="Display Name" class="dashboard_card_text"/>
            <RadzenTextBox @bind-Value="@newURL" Placeholder="URL" class="dashboard_card_text" />
            <RadzenTextArea @bind-Value="@newDescription" Placeholder="Description" class="dashboard_card_text"/>
            <RadzenButton Click="@OnClickNewSave" Icon="save" class="right_button"/>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

@code {
    List<DashboardItem>? dashboardItems;

    bool addHidden;

    Dictionary<int, bool> editHiddenDict = new();

    string newDisplay = String.Empty;
    string newURL = String.Empty;
    string newDescription = String.Empty;

    private long maxFileSize = 1024 * 64;

    async protected override Task OnInitializedAsync()
    {
        addHidden = true;

        dashboardItems = await DashAPI.GetAll();

        if (null != dashboardItems) 
        {
            foreach (var item in dashboardItems)
            {
                if (!editHiddenDict.ContainsKey(item.ID)) 
                {
                    editHiddenDict.Add(item.ID, true);
                }
            }
        }

        await base.OnInitializedAsync();
    }

    async void OnClickCard(DashboardItem item) {
        if (editHiddenDict[item.ID]) {
            if (DashboardItem.UrlIsValid(item))
            {
                await JSRuntime.InvokeVoidAsync("open", $"{item.URL}", "_blank");
            }
        }
    }

    void OnClickAdd() {
        addHidden = !addHidden;
    }

    void OnClickEdit(int ID) {
        editHiddenDict[ID] = !editHiddenDict[ID];
    }

    async void OnClickCardSave(int ID) {
        if (null != dashboardItems) {
            DashboardItem? editItem = dashboardItems.Where(x => x.ID == ID).FirstOrDefault();

            if (null != editItem) {
                try
                {
                    await DashAPI.EditItem(editItem);
                    dashboardItems = await DashAPI.GetAll();

                    StateHasChanged();
                    ShowNotification(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Success",
                            Detail = $"{editItem.ID} successfully edited",
                            Duration = 4000
                        });

                    editHiddenDict[ID] = true;
                    StateHasChanged();
                }
                catch(Exception ex)
                {
                    ShowNotification(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = ex.Message,
                            Duration = 4000
                        });
                }
            }
        }
    }

    async void OnClickCardDelete(int ID) {
        if (null != dashboardItems)
        {
            DashboardItem? deleteItem = dashboardItems.Where(x => x.ID == ID).FirstOrDefault();

            if (null != deleteItem)
            {
                try 
                {
                    await DashAPI.DeleteItem(deleteItem);
                    dashboardItems = await DashAPI.GetAll();

                    StateHasChanged();

                    ShowNotification(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Success",
                            Detail = $"{deleteItem.ID} successfully deleted",
                            Duration = 4000
                        });
                } 
                catch (Exception ex)
                {
                    ShowNotification(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = ex.Message,
                            Duration = 4000
                        });
                }
            }
        }
    }

    async void OnClickNewSave() {
        DashboardItem addItem = new(){ 
            ID = 0, 
            DisplayName = newDisplay, 
            URL = newURL, 
            Description = newDescription 
        };

        if (null != addItem) {
            if (DashboardItem.IsValid(addItem)) {
                try
                {
                    await DashAPI.AddItem(addItem);
                    dashboardItems = await DashAPI.GetAll();

                    //reset state
                    newDescription = String.Empty;
                    newDisplay = String.Empty;
                    newURL = String.Empty;

                    addHidden = true;

                    StateHasChanged();
                    ShowNotification(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Success",
                            Detail = $"{addItem.ID} successfully added",
                            Duration = 4000
                        });
                }
                catch (Exception ex)
                {
                    ShowNotification(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = ex.Message,
                            Duration = 4000
                        });
                }
            } 
            else 
            {
                ShowNotification(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Object is invalid",
                        Duration = 4000
                    });
            }
        } 
        else {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Object is null",
                    Duration = 4000
                });
        }
    }

    private async Task IconUpload(InputFileChangeEventArgs e, int ID)
    {
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream(maxFileSize).CopyToAsync(ms);
        byte[] bytes = ms.ToArray();

        if (null != dashboardItems) {
            DashboardItem? editItem = dashboardItems.Where(x => x.ID == ID).FirstOrDefault();

            if (null != editItem) {
                try
                {
                    editItem.Icon = bytes;

                    await DashAPI.EditItem(editItem);
                    dashboardItems = await DashAPI.GetAll();

                    StateHasChanged();

                    ShowNotification(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Success",
                            Detail = $"{editItem.ID} successfully edited",
                            Duration = 4000
                        });
                } 
                catch(Exception ex)
                {
                    ShowNotification(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = ex.Message,
                            Duration = 4000
                        });
                }
            } 
            else 
            {
                ShowNotification(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Object is invalid",
                        Duration = 4000
                    });
            }
        }
        else
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Object is null",
                    Duration = 4000
                });
        }
    }

    string GetSvgString(byte[] bytes)
    {
        var imageSrc = Convert.ToBase64String(bytes);
        return string.Format("data:image/svg+xml;base64,{0}", imageSrc);
    }

    string GetPngString(byte[] bytes)
    {
        var imageSrc = Convert.ToBase64String(bytes);
        return string.Format("data:image/png;base64,{0}", imageSrc);
    }

    string GetJpegString(byte[] bytes)
    {
        var imageSrc = Convert.ToBase64String(bytes);
        return string.Format("data:image/jpeg;base64,{0}", imageSrc);
    }

    async Task OnDeleteIcon(int ID) {
        if (null != dashboardItems)
        {
            DashboardItem? editItem = dashboardItems.Where(x => x.ID == ID).FirstOrDefault();

            if (null != editItem)
            {
                try
                {
                    editItem.Icon = null;

                    await DashAPI.EditItem(editItem);
                    dashboardItems = await DashAPI.GetAll();

                    StateHasChanged();

                    ShowNotification(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Success",
                            Detail = $"{editItem.ID} successfully deleted icon",
                            Duration = 4000
                        });
                }
                catch (Exception ex)
                {
                    ShowNotification(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = ex.Message,
                            Duration = 4000
                        });
                }
            }
            else
            {
                ShowNotification(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Object is invalid",
                        Duration = 4000
                    });
            }
        }
        else
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Object is null",
                    Duration = 4000
                });
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}
