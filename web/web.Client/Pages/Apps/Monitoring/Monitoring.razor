@using ApexCharts

@inject danklibrary.DankAPI.Monitoring MonitoringAPI
@inject IJSRuntime JSRuntime

@page "/monitoring/home"

<PageTitle>monitoring</PageTitle>

<div>
    @if (null != monitorStates)
    {
        <ApexChart TItem="MonitorState"
        Title="Uptime"
        Height="@("100%")"
        Options="options">

            <ApexPointSeries TItem="MonitorState"
            Items="monitorStates"
            XValue="@(x => $"{x.SubmitTime.Hour}:{x.SubmitTime.Minute}:{x.SubmitTime.Second}")"
            YAggregate="@(e => e.Where(x => x.IcmpResponse == true).Count())"
            SeriesType="SeriesType.Line"
            Name="Devices Online">
            </ApexPointSeries>

            <ApexPointSeries TItem="MonitorState"
            Items="monitorStates"
            XValue="@(x => $"{x.SubmitTime.Hour}:{x.SubmitTime.Minute}:{x.SubmitTime.Second}")"
            YAggregate="@(e => e.Where(x => x.IcmpResponse == false).Count())"
            SeriesType="SeriesType.Line"
            Name="Devices Offline">
            </ApexPointSeries>

            <ApexPointSeries TItem="MonitorState"
            Items="monitorStates"
            XValue="@(x => $"{x.SubmitTime.Hour}:{x.SubmitTime.Minute}:{x.SubmitTime.Second}")"
            YAggregate="@(e => e.Count())"
            SeriesType="SeriesType.Line"
            Name="Devices Monitored">
            </ApexPointSeries>

        </ApexChart>
    }
    else
    {
        <RadzenProgressBarCircular Mode="ProgressBarMode.Indeterminate"/>
    }
</div>
<div>
    <RadzenCard>
        <RadzenText Content="All Time Statistics:"/>
        @if (null != monitorStates)
        {
            <RadzenText>
                Monitored: @(monitorStates.Select(x => x.IP_ID).Distinct().Count().ToString())
            </RadzenText>
            <RadzenText>
                Polls: @monitorStates.Count()
            </RadzenText>
        }
        else
        {
            <RadzenProgressBarCircular Mode="ProgressBarMode.Indeterminate"/>
        }
    </RadzenCard>
</div>
<div>
    <RadzenCard>
        <RadzenText Content="Last Poll Statistics:"/>
        @if (null != monitoredIPs && null != lastPolls)
        {
            <RadzenText>Time: @lastDate</RadzenText>
            <RadzenText>Monitored: @lastPolls.Count()</RadzenText>
            <RadzenText>Online: @lastPolls.Where(x => x.IcmpResponse == true).Count()</RadzenText>
            <RadzenText>Offline: @lastPolls.Where(x => x.IcmpResponse == false).Count()</RadzenText>
        }
    </RadzenCard>
</div>
<div>
    <RadzenCard>
        <RadzenText Content="Monitored IPs"/>
        <RadzenButton Icon="arrowdown" Click="@(() => ToggleMonitoredHidden())" />

        @if (null != currentlyMonitored) {
            foreach (IP ip in currentlyMonitored)
            {
                <RadzenCard>
                    <RadzenText>
                        @IP.ConvertToString(ip.Address)
                    </RadzenText>
                    <RadzenText>
                        @ip.Hostname
                    </RadzenText>
                    @if (LastMonitorState(ip.ID)) {
                        <Icon Type="IconType.Material" Icon="checkboxchecked"/>
                    } 
                    else
                    {
                        <Icon Type="IconType.Material" Icon="checkboxunchecked"/>
                    }
                </RadzenCard>
            }
        }
    </RadzenCard>
</div>

@code {
    List<MonitorState>? monitorStates;
    List<IP>? monitoredIPs;
    List<IP>? currentlyMonitored;

    DateTime? lastDate;
    List<MonitorState>? lastPolls;

    bool monitoredHidden = true;

    ApexChartOptions<MonitorState> options = new ApexChartOptions<MonitorState>();

    async protected override Task OnInitializedAsync()
    {
        options.Xaxis = new XAxis
        {
            Title = new AxisTitle {
                Text = "Time (hh:mm:ss)"
            }
        };

        await UpdateMonitorList();
        await UpdateIPlist();

        await base.OnInitializedAsync();
    }

    async Task UpdateMonitorList() {
        monitorStates = await MonitoringAPI.GetAllPolls();   

        lastDate = monitorStates.OrderByDescending(x => x.SubmitTime).Select(x => x.SubmitTime).FirstOrDefault();
        lastPolls = monitorStates.Where(x => x.SubmitTime == lastDate).ToList();
    }

    async Task UpdateIPlist() {
        monitoredIPs = await MonitoringAPI.GetMonitoredIPs();

        if (null != lastPolls) {
            var ids = lastPolls.Select(x => x.IP_ID).Distinct();
            currentlyMonitored = monitoredIPs.Where(x => ids.Contains(x.ID)).ToList();
        }

    }

    void ToggleMonitoredHidden() {
        monitoredHidden = !monitoredHidden;
    }

    bool LastMonitorState(int ID) {
        if (null != lastPolls) {
            var state = lastPolls.Where(x => x.IP_ID == ID).FirstOrDefault();

            if (null != state) {
                if (state.IcmpResponse == true)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            } else {
                return false; 
            }

        } else {
            return false;
        }
    }
}
