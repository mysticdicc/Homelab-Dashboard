// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using danklibrary;

namespace dankweb.API;
public partial class danknetContext : DbContext
{
    public danknetContext()
    {
        Database.EnsureCreated();
    }

    public danknetContext(DbContextOptions<danknetContext> options)
        : base(options)
    {
        Database.EnsureCreated();
    }

    public virtual DbSet<Asset> Assets { get; set; }
    public virtual DbSet<DashboardItem> DashboardItems { get; set; }
    public virtual DbSet<IP> IPs { get; set; }
    public virtual DbSet<Subnet> Subnets { get; set; }
    public virtual DbSet<MonitorState> MonitorStates { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Asset>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("assets");

            entity.Property(e => e.Description)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Id)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Keywords).IsUnicode(false);
            entity.Property(e => e.Location)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Picture).IsUnicode(false);
        });

        modelBuilder.Entity<DashboardItem>(entity =>
        {
            entity.ToTable("dashboard_items");

            entity.Property(e => e.ID);
            entity.Property(e => e.Description)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.DisplayName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Icon).IsUnicode(false);
            entity.Property(e => e.URL)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IP>(entity =>
        {
            entity.ToTable("ips");

            entity.HasIndex(e => e.ID);
            entity.HasIndex(e => e.Address).IsUnique();

            //entity.HasKey(x => new { x.ID, x.Address });

            entity.Property(e => e.ID);
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(4)
                .IsFixedLength();
            entity.Property(e => e.Hostname)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SubnetID);
            entity.Property(e => e.IsMonitoredICMP);
            entity.Property(e => e.IsMonitoredTCP);
            entity.Property(e => e.PortsMonitored);

            entity.HasMany(e => e.MonitorStateList)
                .WithOne(e => e.IP)
                .HasForeignKey(e => e.IP_ID)
                .HasPrincipalKey(e => e.ID);
            

        });

        modelBuilder.Entity<Subnet>(entity =>
        {
            entity.ToTable("subnets");

            entity.HasIndex(e => e.ID);

            entity.Property(e => e.ID);
            entity.Property(e => e.EndAddress)
                .IsRequired()
                .HasMaxLength(4)
                .IsFixedLength();
            entity.Property(e => e.StartAddress)
                .IsRequired()
                .HasMaxLength(4)
                .IsFixedLength();
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(4)
                .IsFixedLength();
            entity.Property(e => e.SubnetMask)
                .IsRequired()
                .HasMaxLength(4)
                .IsFixedLength();

            entity.HasMany(e => e.List)
                .WithOne(e => e.Subnet)
                .HasForeignKey(e => e.SubnetID)
                .HasPrincipalKey(e => e.ID);
        });

        modelBuilder.Entity<MonitorState>(entity =>
        {
            entity.ToTable("monitoring");

            entity.HasIndex(e => e.ID);

            entity.Property(e => e.ID);
            entity.Property(e => e.IP_ID);
            entity.Property(e => e.SubmitTime).HasColumnType("DateTime");
            entity.Property(e => e.IcmpResponse);

            entity.HasMany(e => e.PortState)
                .WithOne(e => e.MonitorState)
                .HasForeignKey(e => e.MonitorID)
                .HasPrincipalKey(e => e.ID);
        });

        modelBuilder.Entity<PortState>(entity =>
        {
            entity.ToTable("monitoring_ports");

            entity.HasIndex(e => e.ID);

            entity.Property(e => e.ID);
            entity.Property(e => e.MonitorID);
            entity.Property(e => e.Port);
            entity.Property(e => e.Status);
        }
        );
    }
}